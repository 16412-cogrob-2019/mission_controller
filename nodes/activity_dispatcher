#! /usr/bin/env python

import roslib
import rospy
from mission_controller import TurtlebotClient
import numpy as np

from mission_controller.msg import ActivityDone, ActivityRequest, ActivityStart, Sample

class Dispatcher:

    def __init__(self):

        self.sub = rospy.Subscriber('activity/post', ActivityRequest, self.dispatch_activity)

        self.start_pub = rospy.Publisher('activity/start', ActivityStart, queue_size=10)
        self.done_pub = rospy.Publisher('activity/done', ActivityDone, queue_size=10)

	self.sub = rospy.Subscriber('/sample_report', Sample, self.update_results)

	# SARAH: initialize the dict  
        self.results = dict()

    def update_results(self, msg):
	print("GOT A NEW SAMPLE")
	# SARAH: update the dict 
        self.results[msg.agent_id] = msg #[msg.sample_x_loc,msg.sample_y_loc,msg.sample_val]
	print("Updates the results dict")

    def dispatch_activity(self, msg):
        
	#publish that you have recieved and are starting the activity
        start_msg = ActivityStart(activity_id=msg.activity_id, activity_name=msg.activity_name)
        self.start_pub.publish(start_msg)
        print("Received activity {}".format(msg.activity_name))

        tbs = rospy.get_param("/mission_controller/agents")
        num_turtlbots = len(tbs)

        if len(tbs) != len(msg.plns):
            raise Exception("Number of plans in the activity and the number of agents doesn't match!")
	
	# SARAH: reset the dict  
        self.results = dict()

        for tb, plan in zip(tbs, msg.plns):
            #goal_data = (plan.wypts[0].x, plan.wypts[0].y, plan.wypts[0].vel) ##TODO NEEDS TO CHANGE
            #TurtlebotClient(results, ns=tb).connect_client(plan)
            TurtlebotClient(ns=tb).connect_client(plan)
        print("Waiting for turltebots to execute plans...")
        while len(self.results) < num_turtlbots:
            pass

        print("Completed acitivity {}".format(msg.activity_name))

        result_list = list(np.zeros(num_turtlbots))
        x_vals = list(np.zeros(num_turtlbots))
        y_vals = list(np.zeros(num_turtlbots))
        for i, tb in enumerate(tbs):
            result_list[i] = self.results[tb].sample_val
            x_vals[i] = self.results[tb].sample_x_loc
            y_vals[i] = self.results[tb].sample_y_loc

        done_msg = ActivityDone(activity_id=msg.activity_id, activity_name=msg.activity_name, samples=result_list, x_vals=x_vals, y_vals=y_vals)
        self.done_pub.publish(done_msg)


        return



if __name__ == '__main__':
    rospy.init_node('activity_dispatcher')

    activity_dispatcher = Dispatcher()
    print("Dispatcher ready!")

    rospy.spin()
